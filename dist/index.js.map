{
  "version": 3,
  "sources": ["../workers-site/index.js"],
  "sourceRoot": "dist",
  "sourcesContent": ["/**\n * Simple Cloudflare Worker script to serve static files\n * with Single Page App (SPA) routing support\n */\n\n// The directory containing your static assets - matches wrangler.toml\nconst ASSETS_DIR = 'out';\n\n// Define the HTML content types\nconst HTML_CONTENT_TYPES = ['text/html', 'application/xhtml+xml'];\n\n/**\n * Main fetch handler for all incoming requests\n */\naddEventListener('fetch', event => {\n  event.respondWith(handleRequest(event.request))\n});\n\n/**\n * Handle incoming requests by serving static assets\n */\nasync function handleRequest(request) {\n  // Get the URL from the request\n  const url = new URL(request.url);\n  let pathname = url.pathname;\n  \n  // Apply security headers to all responses\n  const securityHeaders = {\n    'X-XSS-Protection': '1; mode=block',\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'Referrer-Policy': 'no-referrer',\n    'Content-Security-Policy': \"default-src 'self'; img-src 'self' data:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';\"\n  };\n\n  try {\n    // Default to index.html if the path is the root\n    if (pathname === '/') {\n      pathname = '/index.html';\n    }\n    \n    // Try to serve the requested file\n    let response = await fetch(new URL(pathname.slice(1), self.origin));\n    \n    // Handle 404 for missing files with the index.html for SPA routing\n    if (!response.ok) {\n      // For SPA routing, serve the index.html for 404s\n      response = await fetch(new URL('index.html', self.origin));\n    }\n\n    // Clone the response to modify its headers\n    const newResponse = new Response(response.body, response);\n    \n    // Add security headers\n    Object.keys(securityHeaders).forEach(key => {\n      newResponse.headers.set(key, securityHeaders[key]);\n    });\n    \n    return newResponse;\n  } catch (error) {\n    // Return a 500 error for any server issues\n    return new Response(`Server error: ${error.message}`, {\n      status: 500,\n      headers: securityHeaders\n    });\n  }\n}\n"],
  "mappings": ";;;;;AAcA,mBAAiB,SAAS,WAAS;AACjC,UAAM,YAAY,cAAc,MAAM,OAAO,CAAC;AAAA,EAChD,CAAC;AAKD,iBAAe,cAAc,SAAS;AAEpC,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,QAAI,WAAW,IAAI;AAGnB,UAAM,kBAAkB;AAAA,MACtB,oBAAoB;AAAA,MACpB,0BAA0B;AAAA,MAC1B,mBAAmB;AAAA,MACnB,mBAAmB;AAAA,MACnB,2BAA2B;AAAA,IAC7B;AAEA,QAAI;AAEF,UAAI,aAAa,KAAK;AACpB,mBAAW;AAAA,MACb;AAGA,UAAI,WAAW,MAAM,MAAM,IAAI,IAAI,SAAS,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC;AAGlE,UAAI,CAAC,SAAS,IAAI;AAEhB,mBAAW,MAAM,MAAM,IAAI,IAAI,cAAc,KAAK,MAAM,CAAC;AAAA,MAC3D;AAGA,YAAM,cAAc,IAAI,SAAS,SAAS,MAAM,QAAQ;AAGxD,aAAO,KAAK,eAAe,EAAE,QAAQ,SAAO;AAC1C,oBAAY,QAAQ,IAAI,KAAK,gBAAgB,GAAG,CAAC;AAAA,MACnD,CAAC;AAED,aAAO;AAAA,IACT,SAAS,OAAO;AAEd,aAAO,IAAI,SAAS,iBAAiB,MAAM,OAAO,IAAI;AAAA,QACpD,QAAQ;AAAA,QACR,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AA7Ce;",
  "names": []
}
